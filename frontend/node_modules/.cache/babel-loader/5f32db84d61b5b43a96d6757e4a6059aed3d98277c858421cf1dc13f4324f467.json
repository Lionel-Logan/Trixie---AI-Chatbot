{"ast":null,"code":"var _jsxFileName = \"D:\\\\interview_prep\\\\Trixie---AI-Chatbot\\\\frontend\\\\src\\\\pages\\\\dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport './dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  // Dummy dataset - in a real app, you would fetch this from an API\n  const [questionData, setQuestionData] = useState([{\n    name: 'Easy',\n    value: 15,\n    color: '#4CAF50'\n  },\n  // Green for easy\n  {\n    name: 'Medium',\n    value: 8,\n    color: '#FFC107'\n  },\n  // Yellow for medium\n  {\n    name: 'Hard',\n    value: 3,\n    color: '#F44336'\n  } // Red for hard\n  ]);\n\n  // Total questions solved\n  const totalQuestions = questionData.reduce((sum, item) => sum + item.value, 0);\n\n  // Custom renderer for the pie chart labels\n  const renderCustomizedLabel = ({\n    cx,\n    cy,\n    midAngle,\n    innerRadius,\n    outerRadius,\n    percent,\n    index\n  }) => {\n    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n    const x = cx + radius * Math.cos(-midAngle * Math.PI / 180);\n    const y = cy + radius * Math.sin(-midAngle * Math.PI / 180);\n    return /*#__PURE__*/_jsxDEV(\"text\", {\n      x: x,\n      y: y,\n      fill: \"white\",\n      textAnchor: \"middle\",\n      dominantBaseline: \"central\",\n      fontSize: 14,\n      fontWeight: \"bold\",\n      children: `${(percent * 100).toFixed(0)}%`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Function to toggle between demo data and empty data (for testing)\n  const toggleData = () => {\n    if (totalQuestions > 0) {\n      // Set to empty data\n      setQuestionData([{\n        name: 'Easy',\n        value: 0,\n        color: '#4CAF50'\n      }, {\n        name: 'Medium',\n        value: 0,\n        color: '#FFC107'\n      }, {\n        name: 'Hard',\n        value: 0,\n        color: '#F44336'\n      }]);\n    } else {\n      // Set to demo data\n      setQuestionData([{\n        name: 'Easy',\n        value: 15,\n        color: '#4CAF50'\n      }, {\n        name: 'Medium',\n        value: 8,\n        color: '#FFC107'\n      }, {\n        name: 'Hard',\n        value: 3,\n        color: '#F44336'\n      }]);\n    }\n  };\n};\n_s(Dashboard, \"L4oOL9U4d599ACwqmBlsNfTdZh0=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","PieChart","Pie","Cell","ResponsiveContainer","Legend","Tooltip","jsxDEV","_jsxDEV","Dashboard","_s","questionData","setQuestionData","name","value","color","totalQuestions","reduce","sum","item","renderCustomizedLabel","cx","cy","midAngle","innerRadius","outerRadius","percent","index","radius","x","Math","cos","PI","y","sin","fill","textAnchor","dominantBaseline","fontSize","fontWeight","children","toFixed","fileName","_jsxFileName","lineNumber","columnNumber","toggleData","_c","$RefreshReg$"],"sources":["D:/interview_prep/Trixie---AI-Chatbot/frontend/src/pages/dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\r\nimport './dashboard.css';\r\n\r\nconst Dashboard = () => {\r\n  // Dummy dataset - in a real app, you would fetch this from an API\r\n  const [questionData, setQuestionData] = useState([\r\n    { name: 'Easy', value: 15, color: '#4CAF50' },  // Green for easy\r\n    { name: 'Medium', value: 8, color: '#FFC107' }, // Yellow for medium\r\n    { name: 'Hard', value: 3, color: '#F44336' }    // Red for hard\r\n  ]);\r\n\r\n  // Total questions solved\r\n  const totalQuestions = questionData.reduce((sum, item) => sum + item.value, 0);\r\n\r\n  // Custom renderer for the pie chart labels\r\n  const renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent, index }) => {\r\n    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\r\n    const x = cx + radius * Math.cos(-midAngle * Math.PI / 180);\r\n    const y = cy + radius * Math.sin(-midAngle * Math.PI / 180);\r\n\r\n    return (\r\n      <text \r\n        x={x} \r\n        y={y} \r\n        fill=\"white\" \r\n        textAnchor=\"middle\" \r\n        dominantBaseline=\"central\"\r\n        fontSize={14}\r\n        fontWeight=\"bold\"\r\n      >\r\n        {`${(percent * 100).toFixed(0)}%`}\r\n      </text>\r\n    );\r\n  };\r\n\r\n  // Function to toggle between demo data and empty data (for testing)\r\n  const toggleData = () => {\r\n    if (totalQuestions > 0) {\r\n      // Set to empty data\r\n      setQuestionData([\r\n        { name: 'Easy', value: 0, color: '#4CAF50' },\r\n        { name: 'Medium', value: 0, color: '#FFC107' },\r\n        { name: 'Hard', value: 0, color: '#F44336' }\r\n      ]);\r\n    } else {\r\n      // Set to demo data\r\n      setQuestionData([\r\n        { name: 'Easy', value: 15, color: '#4CAF50' },\r\n        { name: 'Medium', value: 8, color: '#FFC107' },\r\n        { name: 'Hard', value: 3, color: '#F44336' }\r\n      ]);\r\n    }\r\n  };\r\n\r\n \r\n};\r\n\r\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}